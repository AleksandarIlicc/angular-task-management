{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, inject } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { TaskService } from \"../../Services/task.service\";\nexport let OverviewComponent = class OverviewComponent {\n  constructor() {\n    this.http = inject(HttpClient);\n    this.taskService = inject(TaskService);\n    this.showCreateTaskForm = false;\n    this.showTaskDetails = false;\n    this.allTasks = [];\n    this.currentTask = null;\n    this.currentTaskId = \"\";\n    this.searchedTasks = [];\n    this.searchQuery = \"\";\n    this.isLoading = false;\n    this.errorMessage = null;\n    this.editMode = false;\n    this.statuses = [\"open\", \"started\", \"in-progress\", \"complete\"];\n    this.tasksByStatus = {\n      open: [],\n      started: [],\n      \"in-progress\": [],\n      complete: []\n    };\n  }\n  ngOnInit() {\n    this.fetchAllTasks();\n    this.errorSub = this.taskService.errorSubject.subscribe({\n      next: httpError => {\n        this.setErrorMessage(httpError);\n      }\n    });\n  }\n  ngOnDestroy() {\n    this.errorSub.unsubscribe();\n  }\n  OpenCreateTaskForm() {\n    this.showCreateTaskForm = true;\n    this.editMode = false;\n    this.selectedTask = {\n      title: \"\",\n      desc: \"\",\n      assignedTo: \"\",\n      createdAt: \"\",\n      priority: \"\",\n      status: \"\"\n    };\n  }\n  showCurrentTaskDetails(id) {\n    this.showTaskDetails = true;\n    this.taskService.getTaskDetails(id).subscribe({\n      next: data => {\n        this.currentTask = data;\n      }\n    });\n  }\n  CloseTaskDetails(closeForm) {\n    this.showTaskDetails = closeForm;\n  }\n  CloseCreateTaskForm(closeForm) {\n    this.showCreateTaskForm = closeForm;\n  }\n  CreateOrUpdateTask(data) {\n    if (!this.editMode) {\n      this.taskService.CreateTask(data);\n    } else {\n      this.taskService.UpdateTask(this.currentTaskId, data);\n    }\n  }\n  FetchAllTaskClicked() {\n    this.fetchAllTasks();\n  }\n  fetchAllTasks() {\n    this.isLoading = true;\n    this.taskService.GetAlltasks().subscribe({\n      next: tasks => {\n        this.allTasks = tasks;\n        this.searchedTasks = tasks;\n        this.organizetasksByStatus();\n        this.isLoading = false;\n      },\n      error: error => {\n        this.setErrorMessage(error);\n        this.isLoading = false;\n      }\n    });\n  }\n  setErrorMessage(err) {\n    if (err.error.error === \"Permission denied\") {\n      this.errorMessage = \"You do not have permisssion to perform this action\";\n    } else {\n      this.errorMessage = err.message;\n    }\n    setTimeout(() => {\n      this.errorMessage = null;\n    }, 3000);\n  }\n  DeleteTask(id) {\n    this.taskService.DeleteTask(id);\n    this.fetchAllTasks();\n  }\n  DeleteAllTask() {\n    this.taskService.DeleteAllTasks();\n    this.fetchAllTasks();\n  }\n  OnEditTaskClicked(id) {\n    this.currentTaskId = id;\n    //OPEN EDIT TASK FORM\n    this.showCreateTaskForm = true;\n    this.editMode = true;\n    this.selectedTask = this.allTasks.find(task => {\n      return task.id === id;\n    });\n  }\n  organizetasksByStatus() {\n    // return this.searchedTasks.reduce((acc, task) => {\n    //   if (!acc[task.status]) {\n    //     acc[task.status] = [];\n    //   }\n    //   acc[task.status].push(task);\n    //   return acc;\n    // }, {});\n    this.statuses.forEach(status => {\n      this.tasksByStatus[status] = this.searchedTasks.filter(task => task.status === status);\n    });\n  }\n  SearchTask(searchForm) {\n    this.searchQuery = searchForm.value.searchQuery.toLowerCase();\n    if (searchForm.valid) {\n      this.searchedTasks = this.allTasks.filter(task => task.title.toLowerCase().includes(this.searchQuery) || task.assignedTo.toLowerCase().includes(this.searchQuery));\n    }\n    searchForm.reset();\n    this.organizetasksByStatus();\n  }\n};\nOverviewComponent = __decorate([Component({\n  selector: \"app-overview\",\n  templateUrl: \"./overview.component.html\",\n  styleUrls: [\"./overview.component.css\"]\n})], OverviewComponent);","map":{"version":3,"names":["Component","inject","HttpClient","TaskService","OverviewComponent","constructor","http","taskService","showCreateTaskForm","showTaskDetails","allTasks","currentTask","currentTaskId","searchedTasks","searchQuery","isLoading","errorMessage","editMode","statuses","tasksByStatus","open","started","complete","ngOnInit","fetchAllTasks","errorSub","errorSubject","subscribe","next","httpError","setErrorMessage","ngOnDestroy","unsubscribe","OpenCreateTaskForm","selectedTask","title","desc","assignedTo","createdAt","priority","status","showCurrentTaskDetails","id","getTaskDetails","data","CloseTaskDetails","closeForm","CloseCreateTaskForm","CreateOrUpdateTask","CreateTask","UpdateTask","FetchAllTaskClicked","GetAlltasks","tasks","organizetasksByStatus","error","err","message","setTimeout","DeleteTask","DeleteAllTask","DeleteAllTasks","OnEditTaskClicked","find","task","forEach","filter","SearchTask","searchForm","value","toLowerCase","valid","includes","reset","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Aleksandar\\angular_task_management\\src\\app\\dashboard\\overview\\overview.component.ts"],"sourcesContent":["import { Component, OnInit, inject } from \"@angular/core\";\nimport { Task } from \"../../Model/Task\";\nimport {\n  HttpClient,\n  HttpHeaders,\n  HttpErrorResponse,\n} from \"@angular/common/http\";\nimport { TaskService } from \"../../Services/task.service\";\nimport { Subscription } from \"rxjs\";\nimport { NgForm } from \"@angular/forms\";\n\n@Component({\n  selector: \"app-overview\",\n  templateUrl: \"./overview.component.html\",\n  styleUrls: [\"./overview.component.css\"],\n})\nexport class OverviewComponent implements OnInit {\n  http: HttpClient = inject(HttpClient);\n  taskService: TaskService = inject(TaskService);\n  showCreateTaskForm: boolean = false;\n  showTaskDetails: boolean = false;\n  allTasks: Task[] = [];\n  selectedTask: Task;\n  currentTask: Task | null = null;\n  currentTaskId: string = \"\";\n  searchedTasks: Task[] = [];\n  searchQuery: string = \"\";\n  isLoading: boolean = false;\n  errorMessage: string | null = null;\n  editMode: boolean = false;\n  errorSub: Subscription;\n\n  statuses = [\"open\", \"started\", \"in-progress\", \"complete\"];\n\n  tasksByStatus: { [key: string]: Task[] } = {\n    open: [],\n    started: [],\n    \"in-progress\": [],\n    complete: [],\n  };\n\n  ngOnInit() {\n    this.fetchAllTasks();\n    this.errorSub = this.taskService.errorSubject.subscribe({\n      next: (httpError) => {\n        this.setErrorMessage(httpError);\n      },\n    });\n  }\n\n  ngOnDestroy() {\n    this.errorSub.unsubscribe();\n  }\n\n  OpenCreateTaskForm() {\n    this.showCreateTaskForm = true;\n    this.editMode = false;\n    this.selectedTask = {\n      title: \"\",\n      desc: \"\",\n      assignedTo: \"\",\n      createdAt: \"\",\n      priority: \"\",\n      status: \"\",\n    };\n  }\n\n  showCurrentTaskDetails(id: string | undefined) {\n    this.showTaskDetails = true;\n    this.taskService.getTaskDetails(id).subscribe({\n      next: (data: Task) => {\n        this.currentTask = data;\n      },\n    });\n  }\n\n  CloseTaskDetails(closeForm: boolean) {\n    this.showTaskDetails = closeForm;\n  }\n\n  CloseCreateTaskForm(closeForm: boolean) {\n    this.showCreateTaskForm = closeForm;\n  }\n\n  CreateOrUpdateTask(data: Task) {\n    if (!this.editMode) {\n      this.taskService.CreateTask(data);\n    } else {\n      this.taskService.UpdateTask(this.currentTaskId, data);\n    }\n  }\n\n  FetchAllTaskClicked() {\n    this.fetchAllTasks();\n  }\n\n  private fetchAllTasks() {\n    this.isLoading = true;\n    this.taskService.GetAlltasks().subscribe({\n      next: (tasks) => {\n        this.allTasks = tasks;\n        this.searchedTasks = tasks;\n        this.organizetasksByStatus();\n        this.isLoading = false;\n      },\n      error: (error) => {\n        this.setErrorMessage(error);\n        this.isLoading = false;\n      },\n    });\n  }\n\n  private setErrorMessage(err: HttpErrorResponse) {\n    if (err.error.error === \"Permission denied\") {\n      this.errorMessage = \"You do not have permisssion to perform this action\";\n    } else {\n      this.errorMessage = err.message;\n    }\n\n    setTimeout(() => {\n      this.errorMessage = null;\n    }, 3000);\n  }\n\n  DeleteTask(id: string | undefined) {\n    this.taskService.DeleteTask(id);\n    this.fetchAllTasks();\n  }\n\n  DeleteAllTask() {\n    this.taskService.DeleteAllTasks();\n    this.fetchAllTasks();\n  }\n\n  OnEditTaskClicked(id: string | undefined) {\n    this.currentTaskId = id;\n\n    //OPEN EDIT TASK FORM\n    this.showCreateTaskForm = true;\n    this.editMode = true;\n\n    this.selectedTask = this.allTasks.find((task) => {\n      return task.id === id;\n    });\n  }\n\n  private organizetasksByStatus() {\n    // return this.searchedTasks.reduce((acc, task) => {\n    //   if (!acc[task.status]) {\n    //     acc[task.status] = [];\n    //   }\n    //   acc[task.status].push(task);\n    //   return acc;\n    // }, {});\n\n    this.statuses.forEach((status) => {\n      this.tasksByStatus[status] = this.searchedTasks.filter(\n        (task) => task.status === status\n      );\n    });\n  }\n\n  SearchTask(searchForm: NgForm) {\n    this.searchQuery = searchForm.value.searchQuery.toLowerCase();\n\n    if (searchForm.valid) {\n      this.searchedTasks = this.allTasks.filter(\n        (task) =>\n          task.title.toLowerCase().includes(this.searchQuery) ||\n          task.assignedTo.toLowerCase().includes(this.searchQuery)\n      );\n    }\n\n    searchForm.reset();\n    this.organizetasksByStatus();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}