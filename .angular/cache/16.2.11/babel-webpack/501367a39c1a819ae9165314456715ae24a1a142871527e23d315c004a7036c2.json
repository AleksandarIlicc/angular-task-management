{"ast":null,"code":"import { inject } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { TaskService } from \"../Services/task.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./overview/overview.component\";\nexport class DashboardComponent {\n  constructor() {\n    this.http = inject(HttpClient);\n    this.taskService = inject(TaskService);\n    this.showCreateTaskForm = false;\n    this.showTaskDetails = false;\n    this.allTasks = [];\n    this.currentTask = null;\n    this.currentTaskId = \"\";\n    this.isLoading = false;\n    this.errorMessage = null;\n    this.editMode = false;\n    this.statuses = [\"open\", \"started\", \"in-progress\", \"complete\"];\n  }\n  ngOnInit() {\n    this.fetchAllTasks();\n    this.errorSub = this.taskService.errorSubject.subscribe({\n      next: httpError => {\n        this.setErrorMessage(httpError);\n      }\n    });\n  }\n  ngOnDestroy() {\n    this.errorSub.unsubscribe();\n  }\n  OpenCreateTaskForm() {\n    this.showCreateTaskForm = true;\n    this.editMode = false;\n    this.selectedTask = {\n      title: \"\",\n      desc: \"\",\n      assignedTo: \"\",\n      createdAt: \"\",\n      priority: \"\",\n      status: \"\"\n    };\n  }\n  showCurrentTaskDetails(id) {\n    this.showTaskDetails = true;\n    this.taskService.getTaskDetails(id).subscribe({\n      next: data => {\n        this.currentTask = data;\n      }\n    });\n  }\n  CloseTaskDetails() {\n    this.showTaskDetails = false;\n  }\n  CloseCreateTaskForm() {\n    this.showCreateTaskForm = false;\n  }\n  CreateOrUpdateTask(data) {\n    if (!this.editMode) {\n      this.taskService.CreateTask(data);\n      this.fetchAllTasks();\n    } else {\n      this.taskService.UpdateTask(this.currentTaskId, data);\n      this.fetchAllTasks();\n    }\n  }\n  FetchAllTaskClicked() {\n    this.fetchAllTasks();\n  }\n  fetchAllTasks() {\n    this.isLoading = true;\n    this.taskService.GetAlltasks().subscribe({\n      next: tasks => {\n        this.allTasks = tasks;\n        this.isLoading = false;\n      },\n      error: error => {\n        this.setErrorMessage(error);\n        this.isLoading = false;\n      }\n    });\n  }\n  setErrorMessage(err) {\n    if (err.error.error === \"Permission denied\") {\n      this.errorMessage = \"You do not have permisssion to perform this action\";\n    } else {\n      this.errorMessage = err.message;\n    }\n    setTimeout(() => {\n      this.errorMessage = null;\n    }, 3000);\n  }\n  DeleteTask(id) {\n    this.taskService.DeleteTask(id);\n  }\n  DeleteAllTask() {\n    this.taskService.DeleteAllTasks();\n  }\n  OnEditTaskClicked(id) {\n    this.currentTaskId = id;\n    //OPEN EDIT TASK FORM\n    this.showCreateTaskForm = true;\n    this.editMode = true;\n    this.selectedTask = this.allTasks.find(task => {\n      return task.id === id;\n    });\n  }\n  get tasksByStatus() {\n    return this.allTasks.reduce((acc, task) => {\n      if (!acc[task.status]) {\n        acc[task.status] = [];\n      }\n      acc[task.status].push(task);\n      return acc;\n    }, {});\n  }\n  static #_ = this.ɵfac = function DashboardComponent_Factory(t) {\n    return new (t || DashboardComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DashboardComponent,\n    selectors: [[\"app-dashboard\"]],\n    decls: 1,\n    vars: 0,\n    template: function DashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"app-overview\");\n      }\n    },\n    dependencies: [i1.OverviewComponent],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["inject","HttpClient","TaskService","DashboardComponent","constructor","http","taskService","showCreateTaskForm","showTaskDetails","allTasks","currentTask","currentTaskId","isLoading","errorMessage","editMode","statuses","ngOnInit","fetchAllTasks","errorSub","errorSubject","subscribe","next","httpError","setErrorMessage","ngOnDestroy","unsubscribe","OpenCreateTaskForm","selectedTask","title","desc","assignedTo","createdAt","priority","status","showCurrentTaskDetails","id","getTaskDetails","data","CloseTaskDetails","CloseCreateTaskForm","CreateOrUpdateTask","CreateTask","UpdateTask","FetchAllTaskClicked","GetAlltasks","tasks","error","err","message","setTimeout","DeleteTask","DeleteAllTask","DeleteAllTasks","OnEditTaskClicked","find","task","tasksByStatus","reduce","acc","push","_","_2","selectors","decls","vars","template","DashboardComponent_Template","rf","ctx","i0","ɵɵelement"],"sources":["C:\\Users\\Aleksandar\\angular_task_management\\src\\app\\dashboard\\dashboard.component.ts","C:\\Users\\Aleksandar\\angular_task_management\\src\\app\\dashboard\\dashboard.component.html"],"sourcesContent":["import { Component, OnInit, inject } from \"@angular/core\";\r\nimport { Task } from \"../Model/Task\";\r\nimport {\r\n  HttpClient,\r\n  HttpHeaders,\r\n  HttpErrorResponse,\r\n} from \"@angular/common/http\";\r\nimport { TaskService } from \"../Services/task.service\";\r\nimport { Subscription } from \"rxjs\";\r\n\r\n@Component({\r\n  selector: \"app-dashboard\",\r\n  templateUrl: \"./dashboard.component.html\",\r\n  styleUrls: [\"./dashboard.component.css\"],\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n  http: HttpClient = inject(HttpClient);\r\n  taskService: TaskService = inject(TaskService);\r\n  showCreateTaskForm: boolean = false;\r\n  showTaskDetails: boolean = false;\r\n  allTasks: Task[] = [];\r\n  selectedTask: Task;\r\n  currentTask: Task | null = null;\r\n  currentTaskId: string = \"\";\r\n  isLoading: boolean = false;\r\n  errorMessage: string | null = null;\r\n  editMode: boolean = false;\r\n  errorSub: Subscription;\r\n\r\n  statuses = [\"open\", \"started\", \"in-progress\", \"complete\"];\r\n\r\n  ngOnInit() {\r\n    this.fetchAllTasks();\r\n    this.errorSub = this.taskService.errorSubject.subscribe({\r\n      next: (httpError) => {\r\n        this.setErrorMessage(httpError);\r\n      },\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.errorSub.unsubscribe();\r\n  }\r\n\r\n  OpenCreateTaskForm() {\r\n    this.showCreateTaskForm = true;\r\n    this.editMode = false;\r\n    this.selectedTask = {\r\n      title: \"\",\r\n      desc: \"\",\r\n      assignedTo: \"\",\r\n      createdAt: \"\",\r\n      priority: \"\",\r\n      status: \"\",\r\n    };\r\n  }\r\n\r\n  showCurrentTaskDetails(id: string | undefined) {\r\n    this.showTaskDetails = true;\r\n    this.taskService.getTaskDetails(id).subscribe({\r\n      next: (data: Task) => {\r\n        this.currentTask = data;\r\n      },\r\n    });\r\n  }\r\n\r\n  CloseTaskDetails() {\r\n    this.showTaskDetails = false;\r\n  }\r\n\r\n  CloseCreateTaskForm() {\r\n    this.showCreateTaskForm = false;\r\n  }\r\n\r\n  CreateOrUpdateTask(data: Task) {\r\n    if (!this.editMode) {\r\n      this.taskService.CreateTask(data);\r\n      this.fetchAllTasks();\r\n    } else {\r\n      this.taskService.UpdateTask(this.currentTaskId, data);\r\n      this.fetchAllTasks();\r\n    }\r\n  }\r\n\r\n  FetchAllTaskClicked() {\r\n    this.fetchAllTasks();\r\n  }\r\n\r\n  private fetchAllTasks() {\r\n    this.isLoading = true;\r\n    this.taskService.GetAlltasks().subscribe({\r\n      next: (tasks) => {\r\n        this.allTasks = tasks;\r\n        this.isLoading = false;\r\n      },\r\n      error: (error) => {\r\n        this.setErrorMessage(error);\r\n        this.isLoading = false;\r\n      },\r\n    });\r\n  }\r\n\r\n  private setErrorMessage(err: HttpErrorResponse) {\r\n    if (err.error.error === \"Permission denied\") {\r\n      this.errorMessage = \"You do not have permisssion to perform this action\";\r\n    } else {\r\n      this.errorMessage = err.message;\r\n    }\r\n\r\n    setTimeout(() => {\r\n      this.errorMessage = null;\r\n    }, 3000);\r\n  }\r\n\r\n  DeleteTask(id: string | undefined) {\r\n    this.taskService.DeleteTask(id);\r\n  }\r\n\r\n  DeleteAllTask() {\r\n    this.taskService.DeleteAllTasks();\r\n  }\r\n\r\n  OnEditTaskClicked(id: string | undefined) {\r\n    this.currentTaskId = id;\r\n\r\n    //OPEN EDIT TASK FORM\r\n    this.showCreateTaskForm = true;\r\n    this.editMode = true;\r\n\r\n    this.selectedTask = this.allTasks.find((task) => {\r\n      return task.id === id;\r\n    });\r\n  }\r\n\r\n  get tasksByStatus() {\r\n    return this.allTasks.reduce((acc, task) => {\r\n      if (!acc[task.status]) {\r\n        acc[task.status] = [];\r\n      }\r\n      acc[task.status].push(task);\r\n      return acc;\r\n    }, {});\r\n  }\r\n}\r\n","<app-overview></app-overview>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}